# .github/workflows/docker.yml

name: Build and Push Docker Image

# 触发器：
# 1. 创建新的 Release 时自动触发
# 2. 允许在 Actions 页面手动触发
on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Manual Tag (e.g., 1.2.3). If empty, uses "latest".'
        required: false
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 自动修复脚本文件的行尾，确保跨平台兼容性
      - name: Ensure LF line endings for shell scripts
        run: |
          if ! command -v dos2unix &> /dev/null; then
            echo "dos2unix command not found. Installing it..."
            sudo apt-get update -y
            sudo apt-get install -y dos2unix
          fi
          echo "Converting shell scripts to LF line endings..."
          find . -type f -name "*.sh" -exec dos2unix {} +

      # 步骤 3: 设置 QEMU 以支持多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx，这是现代化的构建引擎
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 6 (核心优化): 使用官方 action 提取元数据 (标签和注释)
      # 这比手动脚本更强大、更不容易出错
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devinglaw/deeplxtov1api
          tags: |
            # 当创建 Git 标签 (如 v1.2.3) 时，生成 Docker 标签 1.2.3
            type=semver,pattern={{version}}
            # 当创建 Git 标签 (如 v1.2) 时，生成 Docker 标签 1.2
            type=semver,pattern={{major}}.{{minor}}
            # 当 workflow_dispatch 事件触发时，使用输入的 tag
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}
            # 总是生成 latest 标签
            type=raw,value=latest,enable=true

      # 步骤 7 (核心优化): 构建并推送，增加缓存和元数据
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # 使用上一步生成的标签和注释
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 增加缓存，极大提升后续构建速度和稳定性
          cache-from: type=gha
          cache-to: type=gha,mode=max
